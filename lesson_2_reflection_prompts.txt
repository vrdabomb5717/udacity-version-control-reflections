What happens when you initialize a repository? Why do you need to do it?

     When you initialize a repository, git creates a .git folder in
     that directory with the data necessary to start tracking
     files. You need to do this so that you can start committing files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     The staging area contains the files you want to commit. This can
     contain parts of a file that can help you get a more granular
     commit than if you added an entire file at once.

How can you use the staging area to make sure you have one commit per logical
change?

      The staging area can be used to make sure there is only one
      commit per logical change by only adding files in that logical
      change to the staging area before committing. Once that is
      committed, we can add the next set of files that constitute the
      next logical change and then commit that, and so on.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

      Branches might be helpful if multiple people are working on
      features on a code base all at once. Each feature could be its
      own branch, and features that don't pan out will not get merged
      back into master.

How do the diagrams help you visualize the branch structure?

      Diagrams help by providing an easy way to see all the branches
      that you're interested in, as well as what commits are on each
      branch (and what commits are missing as well.)

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

      Merging two branches results in a commit with changes from both
      branches. That commit will be the HEAD of one of the merged
      branches. We represent it this way in the diagram to indicate
      that the merge commit has two parents, one from each merged branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

      Automatic merging can merge code when the changes are
      unambiguous. Merging manually is tedious, but offers precise
      control over what to do with ambiguous changes where git can't
      figure out whether to keep or remove a line.
