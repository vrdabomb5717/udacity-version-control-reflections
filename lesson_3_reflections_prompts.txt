When would you want to use a remote repository rather than keeping all
your work local?

    You should use a remote repository when you want to share
    your work with other people or you want to make sure that
    you have a backup for your work.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You should pull manually so you don't accidentally introduce
    changes from another person while you are working on a feature or
    trying to fix a bug. That way, you can make sure that only the
    code that you are currently working on is tested and operated on.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

    Branches only happen on a single repository. Cloning a repository
    creates a second, entirely new repository with the same content.
    Forks are a Github feature. They let you create a clone of one
    repository to another.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    This lets us operate on the remote without needing to perform
    expensive network calls to check the status of the remote. This
    also lets us work completely offline, which can be helpful if we
    don't have Internet access.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without using Git or Github, I'd probably need to collaborate the
    old-fashioned way: by using Dropbox or sending emails back and
    forth with the new files. This would lose all change history and
    wouldn't be nearly as easy to work on with other people.

When would you want to make changes in a separate branch rather than
directly in master?  What benefits does each approach have?

    You would want to make changes in a separate branch if you are
    working on an experimental feature or bug fix. Alternatively, you
    would do this if you wanted to make a pull request for a
    repository that you were working on. This lets you review the code
    that will get merged in first. The benefit of working on master
    directly is that you can make changes without needing more
    complicated git features, but this is really only useful if you
    are working by yourself.
